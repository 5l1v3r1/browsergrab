#!/usr/bin/env node

import * as commander from "commander";
import * as fs from "fs";
import * as http from "http";
import * as mongodb from "mongodb";
import * as path from "path";
import * as url from "url";

commander
    .option("-p, --port [value]", "port", 9999)
    .option("-m, --mongo [value]", "mongo address", "localhost:27017")
    .option("-d, --dest [value]", "destination url", "https://google.com")
    .parse(process.argv);

// Document to be inserted into mongo
interface Entry {
    // All data generated by fingerprintjs2
    data: any;
}

// Connect to mongodb
mongodb.connect("mongodb://" + commander.mongo, (err, db) => {
    console.log("connected to mongodb...");

    let collection = db.collection("tracking");

    // Setup web server
    http.createServer((request, response) => {
        let requestUrl = url.parse(request.url);
        let pathname = path.normalize(requestUrl.pathname).substr(1);

        let post = "";

        // if requesting /post, read fingerprint data
        if (pathname === "post") {
            response.writeHead(200);

            // Read POST data
            request.on("data", (data) => {
                post += data.toString();
            });
            request.on("error", () => response.end());

            // All POST received, connection complete
            request.on("end", () => {
                let fp: [ { key: string, value: any }] = JSON.parse(post);

                let map = {};

                for (let f of fp) {
                    map[f.key] = f.value;
                }

                let entry: Entry = {
                    data: map
                };

                collection.insertOne(entry);

                // write redirect URL
                response.write(commander.dest);
                response.end();
            });
        } else { // serve static files
            let normalized = "dist/static/" + pathname;

            let fileStream = fs.createReadStream(normalized);
            fileStream.on("open", () => response.writeHead(200));
            fileStream.on("error", () => {
                response.writeHead(404);
                response.end();
            });
            fileStream.pipe(response);
        }
    }).listen(commander.port);
    console.log("listening on :" + commander.port);
});
